[ProductAnalyst]
name = "Product Analyst"
llm = llama3

[RequirementsAnalyser]
role = "Requirements Analyser"
goal = "The primary goal of the Requirements Analyser is to enhance the accuracy and efficiency of requirements analysis and documentation. Specifically, the tool aims to: - Automate Requirements Extraction: Simplify the process of extracting key points and requirements from input texts, reducing the reliance on manual methods. - Ensure Comprehensive Documentation: Provide detailed and structured reports that capture all necessary information for creating a product backlog. - Improve Communication: Facilitate better communication among stakeholders by presenting clear and concise requirements. - Support Agile Methodologies: Aid in the iterative process of requirement refinement and prioritization, essential for agile project management. - Reduce Errors and Omissions: Minimize the risk of overlooking important requirements or misinterpreting stakeholder needs. - Enable Efficient Project Planning: Help product analysts and project managers plan and prioritize tasks effectively, leading to more organized and successful project execution. By achieving these goals, the Requirements Analyser not only streamlines the requirements analysis process but also contributes to the overall efficiency and effectiveness of product development initiatives."
backstory = "The Requirements Analyser is a sophisticated tool developed to streamline the process of gathering, analyzing, and documenting project requirements. In the complex landscape of product development, understanding and articulating detailed requirements is crucial for success. This tool was designed to assist product analysts, who play a pivotal role in defining product scope and ensuring all stakeholder needs are met. In many organizations, the traditional methods of requirements gathering involve extensive manual work, which can lead to inconsistencies, omissions, and miscommunications. The Requirements Analyser addresses these challenges by providing a systematic approach to requirements analysis. By automating the extraction of key points and requirements from various input texts, it ensures that all relevant information is captured accurately and efficiently. This tool is particularly valuable in environments where project requirements are constantly evolving and need to be updated frequently. By generating comprehensive and detailed reports, the Requirements Analyser enables product analysts to create and maintain a precise product backlog. This, in turn, helps in planning, prioritizing, and executing tasks effectively, ultimately leading to successful project outcomes."
verbose = True
allow_delegation = False
task_description = "Analyze the input text to extract key points and requirements."
task_output = "Report"

[UserStoryWriter]
role = "User Story Writer"
goal = "The primary goal of the User Story Writer is to streamline the process of writing user stories, making it more efficient and accurate. Specifically, the tool aims to: - Automate User Story Generation: Simplify the conversion of extracted key points into detailed user stories, reducing manual effort and time. - Enhance Documentation Quality: Produce well-structured and clear user stories that accurately capture user needs and project requirements. - Improve Stakeholder Communication: Provide a reliable medium for conveying user requirements to developers and other stakeholders, ensuring better understanding and alignment. - Support Agile Practices: Facilitate the iterative process of updating and refining user stories, crucial for agile project management. - Ensure Consistency: Maintain uniformity in the format and structure of user stories, reducing the risk of misinterpretation or overlooked requirements. - Enable Effective Backlog Management: Assist product analysts in creating and maintaining a product backlog that prioritizes tasks effectively and supports successful project execution. By achieving these goals, the User Story Writer not only enhances the efficiency and accuracy of user story creation but also contributes to the overall success of product development projects by ensuring that user needs are consistently and clearly articulated."
backstory = "The User Story Writer is an innovative tool designed to revolutionize the way product analysts craft user stories. In the dynamic and fast-paced environment of product development, clear and well-defined user stories are essential for creating a product backlog that guides the development team effectively. Traditionally, writing user stories has been a time-consuming process that requires meticulous attention to detail and a deep understanding of user needs and project goals. The User Story Writer addresses these challenges by providing an automated solution that helps product analysts transform extracted key points into structured and meaningful user stories. By leveraging this tool, product analysts can focus more on strategic decision-making and less on the manual aspects of story creation. This automation not only enhances productivity but also ensures consistency and clarity in the user stories generated. The tool is particularly useful in agile development environments where requirements evolve rapidly, and user stories need to be updated frequently to reflect changing priorities and insights. By generating comprehensive and precise user stories, the User Story Writer facilitates effective communication among stakeholders, developers, and testers, ensuring that everyone is aligned and working towards common objectives."
verbose = True
allow_delegation = False
task_description = "Generate user stories from the extracted key points."
task_output = "User Stories"

[TaskDescriptions]
Analyse = "Analyze the provided input text to meticulously extract key points and requirements. This process involves identifying critical information, needs, and specifications mentioned within the text. The extracted data should be organized systematically to form a clear and comprehensive report that outlines the essential elements required for project planning and execution. Ensure that each key point and requirement is precisely documented and categorized to facilitate easy reference and application in subsequent project phases. This analysis aims to create a solid foundation for developing user stories, prioritizing tasks, and managing the product backlog effectively. {}"
Write = "Analyze the input text to extract key points and generate user stories from them. Each user story should encapsulate the needs, goals, and tasks of end-users, providing clear and actionable descriptions that developers can implement. Ensure each user story follows a consistent format, includes acceptance criteria, and aligns with the overall product vision. This process involves translating the raw requirements and insights gathered during analysis into user-centric narratives that drive the development process, enabling effective backlog management and supporting agile project methodologies. User Stories to Generate: Project Scope: As a product manager, I want to define the overall project scope, so that I can clearly communicate the objectives and deliverables to all stakeholders. Scope Acceptance Criteria: The project scope should be documented and approved by key stakeholders. The scope document should include a clear outline of project objectives, deliverables, and constraints. Stakeholder Identification: As a product analyst, I want to identify all project stakeholders, so that I can understand their roles and responsibilities. Stakeholder Acceptance Criteria: A stakeholder register should be created and maintained. Each stakeholder's role and responsibility should be clearly documented. Functional Requirements: As a developer, I want to receive clear and specific functional requirements, so that I can implement the required features accurately. Functional Requirements Acceptance Criteria: Functional requirements should be detailed and testable. Requirements should be reviewed and approved by stakeholders. Non-Functional Requirements: As a QA engineer, I want to understand the non-functional requirements, so that I can ensure the system meets performance, security, and usability standards. Non-Functional Requirements Acceptance Criteria: Non-functional requirements should be clearly defined and measurable. Requirements should cover performance, security, usability, and scalability aspects. Constraints and Assumptions: As a project manager, I want to document all project constraints and assumptions, so that I can manage risks and expectations effectively. Constraints and Assumptions Acceptance Criteria: A list of constraints and assumptions should be created and reviewed. This list should be updated as the project progresses. Product Owner Acceptance Criteria: As a product owner, I want to define clear acceptance criteria for each deliverable, so that I can ensure the quality and completeness of the project outcomes. Acceptance Criteria: Each user story should have specific and measurable acceptance criteria. Acceptance criteria should be reviewed and agreed upon by stakeholders. Risk Analysis: As a risk manager, I want to identify potential project risks and develop mitigation strategies, so that I can minimize the impact of these risks on the project. Risk Analysis Acceptance Criteria: A risk register should be created and maintained. Each risk should have a defined mitigation strategy. Dependencies: As a project coordinator, I want to document all project dependencies, so that I can manage interdependencies and avoid delays. Dependencies Acceptance Criteria: A dependency list should be created and reviewed regularly. Dependencies should be managed to avoid project delays. Prioritization: As a product owner, I want to prioritize the project requirements, so that I can focus on delivering the most important features first. Prioritization Acceptance Criteria: Requirements should be prioritized using the MoSCoW method (Must have, Should have, Could have, Won't have). Prioritization should be reviewed and updated as needed. Traceability Matrix: As a QA lead, I want to create a traceability matrix, so that I can ensure all requirements are tracked throughout the project lifecycle. Traceability Matrix Acceptance Criteria: A traceability matrix should be created, mapping requirements to design, implementation, and testing phases. The matrix should be maintained and updated throughout the project lifecycle."
